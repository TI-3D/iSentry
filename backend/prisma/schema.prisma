// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  tokens             Token[]
  username          String
  name              String
  password          String
  identity          Identity?         @relation(fields: [identityId], references: [id])
  identityId        Int?              @unique
  role              Role              @default(OWNER)
  ownerId           Int?
  owner             User?             @relation("Owner Resident",fields: [ownerId], references: [id])
  residents         User[]            @relation("Owner Resident")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("users")
}

enum Role {
  OWNER
  RESIDENT
}

model System_Log {
  id                Int               @id @default(autoincrement())
  timestamp         DateTime          @default(now())
  message           String

  @@map("systemLogs")
}

model Detection_Log {
  id                Int               @id @default(autoincrement())
  timestamp         DateTime          @default(now())
  face              Int
  faceRelation      Face              @relation(fields: [face], references: [id])

  @@map("detectionLogs")
}



model Identity {
  id                Int               @id @default(autoincrement())
  name              String
  faces             Face[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User?

  @@map("identities")
}

model Face {
  id                Int               @id @default(autoincrement())
  identity          Int?
  embedding         Bytes
  bounding_box      Bytes
  singlePictures    Media?            @relation ("SinglePicture", fields : [picture_single], references: [id])
  picture_single    Int?
  fullPictures      Media?            @relation ("FullPicture", fields : [picture_full], references: [id])
  picture_full      Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
  identities        Identity?         @relation(fields: [identity], references: [id])
  detectionLogs     Detection_Log[]

  @@map("faces")
}


model Media {
  id                Int               @id @default(autoincrement())
  path              String
  type              Item_type         @default(VIDEO) 
  capture_method    Capture_method    @default(AUTO)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  facesFull         Face[]            @relation("FullPicture")
  facesSingle       Face[]            @relation("SinglePicture")

  @@map("medias")
}

enum Capture_method {
  AUTO
  MANUAL
  REGISTRATION
}

enum Item_type {
  PICTURE
  VIDEO
}

model Token {
  id                Int               @id @default(autoincrement())
  token             String            @unique
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  type              Type_token        @default(ACCESS)
  createdAt         DateTime          @default(now())

  @@map("tokens")
}

enum Type_token {
  ACCESS
  REFRESH
}